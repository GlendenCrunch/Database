# -*- coding: utf-8 -*-
from shutil import copyfile
import tkinter as tk
from tkinter import ttk as ttk
from tkinter import messagebox as tkMessageBox
import sqlite3
import random
import time
import datetime
import re

def backup():
    copyfile('C:\\ITL\\Database\\db_1.sqlite', 'C:\\ITL\\Database\\backup\\db_1.sqlite')
    statusbar.config(text="Резервная копия создана", fg="darkgreen")

def about_win():
    top = tk.Toplevel(root)
    top.title('О программе')
    top.resizable(0, 0)
    w = top.winfo_screenwidth()
    h = top.winfo_screenheight()
    w = w // 3
    h = h // 2
    w = w - 200
    h = h - 200
    top.geometry('270x280+{}+{}'.format(w, h))

    text1 = ('Data Base v1.01\rDate: 2020-12-02\rAutor: I T L ©')
    text2 = ('Состав базы данных:\r*Аппаратура КИА*\r*Средства измерения КИА*\r*Испытательное оборудование*')
    
    top_1 = tk.Frame(top, height=60, relief="raise")
    top_1.pack(side=tk.TOP, fill=tk.X)
    top_2 = tk.Frame(top, height=80, relief="raise")
    top_2.pack(side=tk.TOP, fill=tk.X)    
    bottom_1 = tk.Frame(top, height=40, relief="raise", bg='grey88')
    bottom_1.pack(side=tk.BOTTOM, fill=tk.X)    

    _autor = ttk.Label(top_1, justify=tk.LEFT, text=text1, foreground='deepskyblue4').place(x=60,y=10)
    _support_1 = ttk.Label(top_2, justify=tk.CENTER, text=text2, font='10', foreground='deepskyblue4').place(x=5,y=5)
    _But = ttk.Button(bottom_1, text='OK', width=10, command=top.destroy).place(x=90,y=2)  

    top.transient(root)
    top.grab_set()
    root.wait_window(top)

def on_closing():
        if not root.trayMenu:
            selection = tkMessageBox.askyesnocancel("ВНИМАНИЕ!", "Закрыть программу?\nДа: Закрыть\nНет: Свернуть в системный трей")
            if selection:
                root.destroy()
            elif selection == False:
                root.withdraw()
                root.tk.call('package', 'require', 'Winico')
                icon = root.tk.call('winico', 'createfrom', 'C:\\ITL\\Database\\icon.ico')
                root.tk.call('winico', 'taskbar', 'add', icon,
                            '-callback', (root.register(menu_func), '%m', '%x', '%y'),
                            '-pos', 0,
                            '-text', u'База данных')

                root.trayMenu = tk.Menu(root, tearoff=False)
                root.trayMenu.add_command(label="Открыть", command=root.deiconify)
                cascadeMenu = tk.Menu(root, tearoff=False)
                cascadeMenu.add_command(label="Casacde one", command=lambda :print("You could define it by yourroot"))
                cascadeMenu.add_command(label="Cascade two")
                root.trayMenu.add_cascade(label="Другое", menu=cascadeMenu)

                root.trayMenu.add_separator()

                root.trayMenu.add_command(label="Закрыть", command=root.destroy)

            else:
                pass
        else:
            root.withdraw()

def menu_func(event, x, y):
    if event == 'WM_RBUTTONDOWN':
        root.trayMenu.tk_popup(x, y)
    if event == 'WM_LBUTTONDOWN':
        root.deiconify()

root = tk.Tk()
root.title("База данных")
#root.iconbitmap('C:\\ITL\\Database\\icon.ico')
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
width = 1300
height = 800
x = (screen_width/2) - (width/2)
y = (screen_height/2) - (height/2)
root.geometry('%dx%d+%d+%d' % (width, height, x, y))
root.resizable(0, 0)
root.protocol("WM_DELETE_WINDOW", on_closing)
root.trayMenu = None
frame = tk.Frame(root)

main_menu = tk.Menu()

file_menu = tk.Menu(main_menu, tearoff=False)
file_menu.add_command(label='Новый')
file_menu.add_command(label='Открыть')
file_menu.add_command(label='Сохранить')
file_menu.add_separator()
file_menu.add_command(label='Закрыть', command=root.quit)

file_setting = tk.Menu(main_menu, tearoff=False)
file_setting.add_command(label='Настройки')
file_setting.add_command(label='Backup DB', command=backup)

main_menu.add_cascade(label='Файл', menu=file_menu)
main_menu.add_cascade(label='Настройки', menu=file_setting)
main_menu.add_cascade(label='О программе', command=about_win)
#==================================FRAME==============================================
Bottom = tk.Frame(root, width=1200, height=30, bd=1, relief="raise")
Bottom.pack(side=tk.BOTTOM, fill=tk.X)
Left = tk.Frame(root, width=600, height=500, bd=1, relief="raise")
Left.pack(side=tk.LEFT, fill=tk.Y)
Top_left = tk.Frame(Left, width=600, height=80)
Top_left.pack(side=tk.TOP, fill=tk.X)
Forms_1 = tk.Frame(Left, width=600, height=450)
Forms_1.pack(side=tk.TOP)
Forms = tk.Frame(Left, width=600, height=450)
Forms.pack(side=tk.TOP)
Buttons = tk.Frame(Left, width=600, height=100, bd=1, relief="raise")
Buttons.pack(side=tk.BOTTOM)
Right_0 = tk.Frame(root, width=600, height=100, bd=1, relief="raise")
Right_0.pack(side=tk.RIGHT, fill=tk.X)
Right_1 = tk.Frame(Right_0, width=600, height=100, bd=1, relief="raise")
Right_1.pack(side=tk.TOP, fill=tk.X)
Right_2 = tk.Frame(Right_0, width=600, height=100, bd=1, relief="raise")
Right_2.pack(side=tk.TOP, fill=tk.X)
#==================================METHODS============================================
def Database():
    global conn, cursor
    conn = sqlite3.connect('C:\\ITL\\Database\\db_1.sqlite')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS equipment (mem_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, named TEXT, type TEXT, number TEXT, date TEXT, place TEXT, service TEXT, date_serv TEXT, date_repair TEXT, description TEXT, id TEXT)")
    cursor.execute("CREATE TABLE IF NOT EXISTS measuring (mem_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, named TEXT,type TEXT, number TEXT, date TEXT, place TEXT, service TEXT, date_serv TEXT, date_repair TEXT, description TEXT, id TEXT)")
    cursor.execute("CREATE TABLE IF NOT EXISTS certification (mem_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, named TEXT,type TEXT, number TEXT, date TEXT, place TEXT, service TEXT, date_serv TEXT, date_repair TEXT, description TEXT, id TEXT)")
    #cursor.close()
    
def Create():
    if   NAMED.get() == "" or TYPE.get() == "" or NUMBER.get() == ""  or DATE.get() == "" or PLACE.get() == "" or SERVICE.get() == "":
        statusbar.config(text="Пожалуйста, заполните поля!", fg="red")
    else:
        Database()
        if table_name[0][0] == 'equipment':
            cursor.execute("INSERT INTO equipment (named,type,number,date,place,service,date_serv,date_repair,description,id) VALUES(?,?,?,?,?,?,?,?,?,?)", (NAMED.get(),TYPE.get(),NUMBER.get(),DATE.get(),PLACE.get(),SERVICE.get(),DATE_SERV.get(),DATE_REPAIR.get(),DESCRIPTION.get(),ID.get()))
        elif table_name[0][0] == 'measuring':
            cursor.execute("INSERT INTO measuring (named,type,number,date,place,service,date_serv,date_repair,description,id) VALUES(?,?,?,?,?,?,?,?,?,?)", (NAMED.get(),TYPE.get(),NUMBER.get(),DATE.get(),PLACE.get(),SERVICE.get(),DATE_SERV.get(),DATE_REPAIR.get(),DESCRIPTION.get(),ID.get()))
        elif table_name[0][0] == 'certification':
            cursor.execute("INSERT INTO certification (named,type,number,date,place,service,date_serv,date_repair,description,id) VALUES(?,?,?,?,?,?,?,?,?,?)", (NAMED.get(),TYPE.get(),NUMBER.get(),DATE.get(),PLACE.get(),SERVICE.get(),DATE_SERV.get(),DATE_REPAIR.get(),DESCRIPTION.get(),ID.get()))
        conn.commit()
        NAMED.set("")
        TYPE.set("")
        NUMBER.set("")
        DATE.set("")
        PLACE.set("")
        SERVICE.set("")
        DATE_SERV.set("")
        DATE_REPAIR.set("")
        DESCRIPTION.set("")
        ID.set("")
        #cursor.close()
        #conn.close()
        statusbar.config(text="Данные внесены!", fg="darkgreen")

def read(arg):
    global fg
    global list_fet
    global cmb_place_list
    global cmb_serv_list
    global cmb_dat_list
    global table_name
    global filters

    list_fet = []
    dict_fet = {}
    combo_named = []
    combo_type = [u'--тип--']
    combo_number = []
    combo_date = [u'--дата обслуживания--']
    combo_place = [u'--место установки--']
    combo_service = [u'--тип обслуживания--']
    tree.delete(*tree.get_children())
    Database()
    fg = arg
    if arg == 1:
        cursor.execute("SELECT * FROM equipment ORDER BY type ASC")
        fetch = cursor.fetchall()
        cursor.execute("SELECT name FROM sqLite_master WHERE type='table' AND name='equipment'")
    elif arg == 2:
        cursor.execute("SELECT * FROM measuring ORDER BY named ASC")
        fetch = cursor.fetchall()
        cursor.execute("SELECT name FROM sqLite_master WHERE type='table' AND name='measuring'")
    elif arg == 3:
        cursor.execute("SELECT * FROM certification ORDER BY type ASC")
        fetch = cursor.fetchall()
        cursor.execute("SELECT name FROM sqLite_master WHERE type='table' AND name='certification'")
    table_name = cursor.fetchall()
    tree_header = ["named", "type", "number", "date", "place", "service"]
    i2 = 0
    j = 0
    for data in fetch:
        if (len(fetch) - i2) % 2 == 0:	
            tree.insert('', index=i2, text=i2+1, values=(data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]), tags = ('oddrow',))
            tree.tag_configure('oddrow', background='#FFF2F2')
        else:
            tree.insert('', index=i2, text=i2+1, values=(data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]), tags = ('evenrow',))
            tree.tag_configure('evenrow', background='#99CCFF')
        if data[0] not in combo_named:
            combo_named.append(data[0])        
        if data[1] not in combo_type:
            combo_type.append(data[1])
        if data[2] not in combo_number:
            combo_number.append(data[2])            
        if data[3] not in combo_date:
            combo_date.append(data[3])        
        if data[4] not in combo_place:
            combo_place.append(data[4])
        if data[5] not in combo_service:
            combo_service.append(data[5])        
        cmb_type.configure(values=combo_type)
        cmb_dat.configure(values=combo_date)
        cmb_place.configure(values=combo_place)
        cmb_serv.configure(values=combo_service)
        cmb_type.current(0)
        cmb_dat.current(0)
        cmb_place.current(0)
        cmb_serv.current(0)
        ID.set(random.random())
        while j < 6:
            dict_fet[tree_header[j]] = fetch[i2][j]
            j += 1
        list_fet.append(dict_fet.copy())
        i2 += 1
        j = 0
   
    filters = []
    for col in tree_header:
        name = 'combo_' + col
        filters.append(name)
        if fg == 1:
            #print (list_fet)
            setattr(Right_1, name, ttk.Combobox(Right_1, values=[''] + sorted(set(x[col] for x in list_fet)), state="readonly"))

        elif fg == 2:
            #print (list_fet)
            setattr(Right_1, name, ttk.Combobox(Right_1, values=[''] + sorted(set(x[col] for x in list_fet)), state="readonly"))
    
    #cursor.close()
    #conn.close()
    
    statusbar.config(text="Данные прочитаны из базы данных", fg="darkgreen")
    return [arg, list_fet]

def read_0():
    tree_header = ["named", "type", "number", "date", "place", "service"]
    for col in tree_header:
        name = 'combo_' + col
        '''if fg == 1:
            print (len(read(1)[1]))
            setattr(Right_1, name, ttk.Combobox(Right_1, values=[''] + sorted(set(x[col] for x in read(1)[1])), state="readonly"))
        elif fg == 2:
            print (read(2)[1])
            setattr(Right_1, name, ttk.Combobox(Right_1, values=[''] + sorted(set(x[col] for x in read(2)[1])), state="readonly"))'''
        getattr(Right_1, name).pack(side=tk.LEFT, expand=True, fill=tk.X)
        getattr(Right_1, name).bind('<<ComboboxSelected>>', select_from_filters)

def select_from_filters(event=None):
    tree.delete(*tree.get_children())
    all_filter = lambda x: all(x[f.split('_')[-1]] == getattr(Right_1, f).get() or getattr(Right_1, f).get() == '' for f in filters)   
    for row in list_fet:
        if all_filter(row):
            tree.insert("", "end", values=list(row.values()))

def Exit():
    result = tkMessageBox.askquestion('Сообщение', 'Вы действительно хотите выйти?', icon="warning")
    if result == 'yes':
        root.destroy()
        exit()

def sort_type():
    tree.delete(*tree.get_children())
    Database()
    if table_name[0][0] == 'equipment':
        cursor.execute("SELECT * FROM equipment ORDER BY type ASC")
    elif table_name[0][0] == 'measuring':
        cursor.execute("SELECT * FROM measuring ORDER BY type ASC")
    elif table_name[0][0] == 'certification':
        cursor.execute("SELECT * FROM certification ORDER BY type ASC")
    fetch = cursor.fetchall()
    i2 = 0
    for data in fetch:
        if sort_var.get() == 0:
            if data[1] == cmb_type.get() or data[3] == cmb_dat.get() or data[4] == cmb_place.get() or data[5] == cmb_serv.get():       
                if (len(fetch) - i2) % 2 == 0:
                    tree.insert('', index=i2, text=i2+1, values=(data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]), tags = ('oddrow',))
                    tree.tag_configure('oddrow', background='#FFF2F2')
                else:
                    tree.insert('', index=i2, text=i2+1, values=(data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]), tags = ('evenrow',))
                    tree.tag_configure('evenrow', background='#99CCFF')
                i2 += 1
        elif sort_var.get() == 1: 
            if data[1] == cmb_type.get() and data[3] == cmb_dat.get() and data[4] == cmb_place.get() and data[5] == cmb_serv.get():
                if (len(fetch) - i2) % 2 == 0:
                    tree.insert('', index=i2, text=i2+1, values=(data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]), tags = ('oddrow',))
                    tree.tag_configure('oddrow', background='#FFF2F2')
                else:
                    tree.insert('', index=i2, text=i2+1, values=(data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8], data[9]), tags = ('evenrow',))
                    tree.tag_configure('evenrow', background='#99CCFF')
                i2 += 1

def _build_tree():
    for col in tree_header:
        tree.heading(col, command=lambda c=col: tree,anchor=tk.W)
        tree.column(col,width=140,anchor=tk.W)
    for item in tree_list:
        #tree.insert('', 'end', values=item)
        tree.bind("<ButtonRelease-1>", clickItem)
    tree.bind("<Double-1>", selectItem)
    tree.bind("<Return>", selectItem)

def getfilet():
    connx = sqlite3.connect('C:\\ITL\\Database\\db_1.sqlite')
    c = connx.cursor()
    filet = c.execute('SELECT named,type,number,date,place,service,date_serv,date_repair,description,id FROM equipment').fetchall()
    #c.close()
    return filet

def clickItem(event):
    curItem = tree.focus()
    type = tree.item(curItem)['values'][1]
    number = tree.item(curItem)['values'][2]
    date = tree.item(curItem)['values'][3]
    date_fut = tree.item(curItem)['values'][3]
    date_fut_1 = int(date_fut[-4:]) + 1
    SetEntryText(type_ent, type)
    SetEntryText(number_ent, number)
    SetEntryText(date_mo_ent, date)
    SetEntryText(date_mo_fut_ent, date_fut[:-4] + str(date_fut_1))

def SetEntryText(txtObject, value):
    txtObject.delete(0, tk.END)
    txtObject.insert(0, value)

def selectItem(event):
    global ent_named
    global ent_type
    global ent_numb
    global ent_data
    global ent_place
    global ent_serv
    global ent_disc
    global ent_id
    
    curItem = tree.focus()
    t_new = tk.Toplevel(takefocus = True)
    t_new.geometry('1100x500')
    t_new.resizable(width='FALSE', height='FALSE')
    t_new.wm_title("%s зав.№%s" % (tree.item(curItem)['values'][1], tree.item(curItem)['values'][2]))

    connx = sqlite3.connect('C:\\ITL\\Database\\db_1.sqlite')
    c = connx.cursor()
    if table_name[0][0] == 'equipment':
        eqe = c.execute('SELECT * FROM equipment WHERE id = ?',(tree.item(curItem)['values'][9],)).fetchall()
    elif table_name[0][0] == 'measuring':
        eqe = c.execute('SELECT * FROM measuring WHERE id = ?',(tree.item(curItem)['values'][9],)).fetchall()
    elif table_name[0][0] == 'certification':
        eqe = c.execute('SELECT * FROM certification WHERE id = ?',(tree.item(curItem)['values'][9],)).fetchall()
    #c.close()
    
    Right_n = tk.Frame(t_new, width=600, height=500, bd=8, relief="raise")
    Right_n.pack(side=tk.RIGHT, fill=tk.Y)
    Left_n = tk.Frame(t_new, width=600, height=500, bd=8, relief="raise")
    Left_n.pack(side=tk.LEFT, fill=tk.Y)

    lbl_id = tk.Label(Left_n, text="ID:", fg='black')
    ent_id = tk.Entry(Left_n, width=25)
    ent_id.configure(background="#fff", highlightbackground="#333", highlightcolor="#fff",font=("Arial", 10, "bold"))
    SetEntryText(ent_id,tree.item(curItem)['values'][9])
    lbl_id.grid(row=0, column=0)
    ent_id.grid(row=0, column=1)

    lbl_named = tk.Label(Left_n, text="Наименование:", fg='black')
    ent_named = tk.Entry(Left_n, width=25) 
    ent_named.configure(background="#fff", highlightbackground="#333", highlightcolor="#fff",font=("Arial", 10, "bold"))
    SetEntryText(ent_named,tree.item(curItem)['values'][0])
    lbl_named.grid(row=1, column=0)
    ent_named.grid(row=1, column=1)
    
    lbl_type = tk.Label(Left_n, text="Тип:", fg='black')
    ent_type = tk.Entry(Left_n, width=25)   
    ent_type.configure(background="#fff", highlightbackground="#333", highlightcolor="#fff",font=("Arial", 10, "bold"))
    SetEntryText(ent_type,tree.item(curItem)['values'][1])
    lbl_type.grid(row=2, column=0)
    ent_type.grid(row=2, column=1)
    
    lbl_numb = tk.Label(Left_n, text="Зав. №:", fg='black') 
    ent_numb = tk.Entry(Left_n, width=25) 
    ent_numb.configure(background="#fff", highlightbackground="#333", highlightcolor="#fff",font=("Arial", 10, "bold"))
    SetEntryText(ent_numb,tree.item(curItem)['values'][2])
    lbl_numb.grid(row=3, column=0)
    ent_numb.grid(row=3, column=1)
    
    lbl_data = tk.Label(Left_n, text="Дата:", fg='black')
    ent_data = tk.Entry(Left_n, width=25)
    ent_data.configure(background="#fff", highlightbackground="#333", highlightcolor="#fff",font=("Arial", 10, "bold"))
    SetEntryText(ent_data,tree.item(curItem)['values'][3])
    lbl_data.grid(row=4, column=0)
    ent_data.grid(row=4, column=1)
    
    lbl_place = tk.Label(Left_n, text="Место установки:", fg='black')
    ent_place = tk.Entry(Left_n, width=25)
    ent_place.configure(background="#fff", highlightbackground="#333", highlightcolor="#fff",font=("Arial", 10, "bold"))
    SetEntryText(ent_place,tree.item(curItem)['values'][4])
    lbl_place.grid(row=5, column=0)
    ent_place.grid(row=5, column=1)    
  
    lbl_serv = tk.Label(Left_n, text="Тип обслуживания:", fg='black')
    ent_serv = tk.Entry(Left_n, width=25)
    ent_serv.configure(background="#fff", highlightbackground="#333", highlightcolor="#fff",font=("Arial", 10, "bold"))
    SetEntryText(ent_serv,tree.item(curItem)['values'][5])
    lbl_serv.grid(row=6, column=0)
    ent_serv.grid(row=6, column=1)    

    lbl_disc = tk.Label(Left_n, text="Примечание:", fg='black')
    ent_disc = tk.Text(Left_n, width=15)
    ent_disc.configure(background="#fff", highlightbackground="#333", highlightcolor="#fff",font=("Arial", 10, "bold"))
    ent_disc.insert(tk.INSERT, eqe[0][8])
    lbl_disc.grid(row=7, column=0)   
    ent_disc.place(x = 10, y = 170, width=290, height=85)

    lbl_ndata = tk.Label(Left_n, text="Новая дата:", fg='black')
    ent_ndata = tk.Entry(Left_n, width=15)
    ent_ndata.configure(background="#fff", highlightbackground="#333", highlightcolor="#fff",font=("Arial", 10, "bold"))
    SetEntryText(ent_ndata,tree.item(curItem)['values'][3])
    lbl_ndata.grid(row=4, column=2)
    ent_ndata.grid(row=4, column=3)

    saveDetailButton = tk.Button(Left_n, text = "Сохранить", fg='#fff', command=saveDetail)
    saveDetailButton.configure(background="#333", highlightbackground="#0CD9E8", highlightcolor="#0DFFCC",font=("Arial", 10, "bold"))
    saveDetailButton.place(x = 10, y = 420, width=108, height=25)
    
    lbl_list = tk.Label(Right_n, text="Данные оборудования", fg='black', font=("Arial", 10, "bold"))
    lbl_list.pack(side=tk.TOP)
    scrollbary = tk.Scrollbar(Right_n, orient=tk.VERTICAL)
    scrollbarx = tk.Scrollbar(Right_n, orient=tk.HORIZONTAL)
    tree_header = ["type", "number", "date", "place"]
    tree_list = getfilet()
    tree2 = ttk.Treeview(Right_n, columns=tree_header, selectmode="extended", height=500, yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
    scrollbary.config(command=tree2.yview)
    scrollbary.pack(side=tk.RIGHT, fill=tk.Y)
    scrollbarx.config(command=tree2.xview)
    scrollbarx.pack(side=tk.BOTTOM, fill=tk.X)
    tree2.heading('#0', text="№", anchor=tk.W)
    tree2.heading('type', text="Тип", anchor=tk.W)
    tree2.heading('number', text="Зав. №", anchor=tk.W)
    tree2.heading('date', text="История обслуживания", anchor=tk.W)
    tree2.heading('place', text="История ремонта", anchor=tk.W)
    tree2.column('#0', stretch=tk.NO, minwidth=0, width=30)
    tree2.column('#1', stretch=tk.NO, minwidth=0, width=80)
    tree2.column('#2', stretch=tk.NO, minwidth=0, width=160)
    tree2.column('#3', stretch=tk.NO, minwidth=0, width=150)
    tree2.column('#4', stretch=tk.NO, minwidth=0, width=150)
    tree2.pack()

    tree2.insert('', 'end', values=(tree.item(curItem)['values'][1],tree.item(curItem)['values'][2],tree.item(curItem)['values'][3],''))

def saveDetail():
    named = ent_named.get()
    type = ent_type.get()
    number = ent_numb.get()
    date = ent_data.get()   
    place = ent_place.get()
    service = ent_serv.get()
    description = ent_disc.get("1.0", tk.END)
    id = ent_id.get()
    db = sqlite3.connect('C:\\ITL\\Database\\db_1.sqlite')
    cursor = db.cursor()
    if table_name[0][0] == 'equipment':
        cursor.execute('UPDATE equipment SET named=?,type=?,number=?,date=?,place=?,service=?,description=?,id=? WHERE id=?',(named,type,number,date,place,service,description,id,id,))
    elif table_name[0][0] == 'measuring':
        cursor.execute('UPDATE measuring SET named=?,type=?,number=?,date=?,place=?,service=?,description=?,id=? WHERE id=?',(named,type,number,date,place,service,description,id,id,))
    elif table_name[0][0] == 'certification':
        cursor.execute('UPDATE certification SET named=?,type=?,number=?,date=?,place=?,service=?,description=?,id=? WHERE id=?',(named,type,number,date,place,service,description,id,id,))
    #cursor.close()
    db.commit()   
     
    for i in tree.get_children():
        tree.delete(i)
    for item in getfilet():
        #tree.insert('', 'end', values=item)
        tree.bind("<ButtonRelease-1>", clickItem)
        tree.bind("<Double-1>", selectItem)
    if table_name[0][0] == 'equipment':
        read(1)
    elif table_name[0][0] == 'measuring':
        read(2)
    elif table_name[0][0] == 'certification':
        read(3)
    

def Delete():
    selected_item_0 = tree.selection()[0]   
    type = tree.item(tree.selection())['values'][1]
    number = tree.item(tree.selection())['values'][2]
    delet = tkMessageBox.askquestion(u'Сообщение', u'Удалить ' + type + u' №' + str(number) + u'?')
    if delet == 'yes':
        if table_name[0][0] == 'equipment':
            cursor.execute('''DELETE FROM equipment WHERE number = ?''',(number,))
        elif table_name[0][0] == 'measuring':
            cursor.execute('''DELETE FROM measuring WHERE number = ?''',(number,))
        elif table_name[0][0] == 'certification':
            cursor.execute('''DELETE FROM certification WHERE number = ?''',(number,))
        #cursor.close()
        conn.commit()
        tree.delete(tree.selection()[0])
#==================================VARIABLES==========================================
NAMED = tk.StringVar()
TYPE = tk.StringVar()
NUMBER = tk.StringVar()
DATE = tk.StringVar()
PLACE = tk.StringVar()
SERVICE = tk.StringVar()
DATE_SERV = tk.StringVar()
DATE_REPAIR = tk.StringVar()
DESCRIPTION = tk.StringVar()
ID = tk.StringVar()
today = datetime.datetime.today()
d = today.strftime('%d.%m.%Y,%H.%M.%S')
sort_var = tk.BooleanVar()
sort_var.set(0)

#==================================LabelFrame=====================================
lbf1 = tk.LabelFrame(Top_left, text='Прочитать БД', width=100, height=100, fg='blue')
lbf1.pack(side=tk.LEFT)
lbf2 = tk.LabelFrame(Top_left, text='Фильтр', width=100, height=100, fg='blue')
lbf2.pack(side=tk.RIGHT)
lbf3 = tk.LabelFrame(Forms_1, text='Метрологическое обеспечение', width=100, height=100, fg='blue')
lbf3.pack(side=tk.RIGHT)
lbf4 = tk.LabelFrame(Forms, text='Создать запись', width=100, height=120, fg='blue')
lbf4.pack(side=tk.RIGHT)
#==================================LABEL WIDGET=======================================
txt_named = tk.Label(lbf4, text="Наименование:", font=('arial', 16), bd=15)
txt_named.grid(row=0, stick="e")
txt_type = tk.Label(lbf4, text="Тип:", font=('arial', 16), bd=15)
txt_type.grid(row=1, stick="e")
txt_number = tk.Label(lbf4, text="Зав. №:", font=('arial', 16), bd=15)
txt_number.grid(row=2, stick="e")
txt_date = tk.Label(lbf4, text="Дата обслуживания:", font=('arial', 16), bd=15)
txt_date.grid(row=3, stick="e")
txt_place = tk.Label(lbf4, text="Место установки:", font=('arial', 16), bd=15)
txt_place.grid(row=4, stick="e")
txt_service = tk.Label(lbf4, text="Тип обслуживания:", font=('arial', 16), bd=15)
txt_service.grid(row=5, stick="e")
date_mo = tk.Label(lbf3, text="Дата ПМО:", font=('arial', 16), bd=15)
date_mo.grid(row=6, stick="e")
date_mo_fut = tk.Label(lbf3, text="Дата СМО:", font=('arial', 16), bd=15)
date_mo_fut.grid(row=7, stick="e")
statusbar = tk.Label(Bottom, width=30, font=('arial', 10))
statusbar.pack(side=tk.LEFT)
labl = tk.Label(Bottom, width=20, font=('arial', 10), text="I T L ©")
labl.pack(side=tk.RIGHT)
#==================================ENTRY WIDGET=======================================
named_ent = tk.Entry(lbf4, textvariable=NAMED, width=20)
named_ent.grid(row=0, column=1)
type_ent = tk.Entry(lbf4, textvariable=TYPE, width=20)
type_ent.grid(row=1, column=1)
number_ent = tk.Entry(lbf4, textvariable=NUMBER, width=20)
number_ent.grid(row=2, column=1)
date_ent = tk.Entry(lbf4, textvariable=DATE, width=20)
date_ent.grid(row=3, column=1)
date_mo_ent = tk.Entry(lbf3, width=18)
date_mo_ent.grid(row=6, column=1)
date_mo_fut_ent = tk.Entry(lbf3, width=18)
date_mo_fut_ent.grid(row=7, column=1)
#==================================Combobox WIDGET=======================================
combo_place = ttk.Combobox(lbf4, textvariable=PLACE, value = ['ФИП', 'цех 20', 'КТРВ', 'СГМетр ЛКИА'], state='readonly', height=4, width=20)
combo_place.grid(row=4, column=1)
combo_place.current(0)
combo_service = ttk.Combobox(lbf4, textvariable=SERVICE, value = ['проверка', 'поверка', 'калибровка', 'аттестация'], state='readonly', height=4, width=20)
combo_service.grid(row=5, column=1)
combo_service.current(0)

cmb_type = ttk.Combobox(lbf2, state='readonly', height=4, width=20)
cmb_type.pack(side=tk.TOP)
cmb_place = ttk.Combobox(lbf2, state='readonly', height=4, width=20)
cmb_place.pack(side=tk.TOP)
cmb_serv = ttk.Combobox(lbf2, state='readonly', height=4, width=20)
cmb_serv.pack(side=tk.TOP)
cmb_dat = ttk.Combobox(lbf2, state='readonly', height=4, width=20)
cmb_dat.pack(side=tk.TOP)
#==================================BUTTONS WIDGET=====================================
btn_kia = tk.Button(lbf1, width=25, text="КИА", fg='#fff', command=lambda: read(1))
btn_kia.configure(background="#6699CC", highlightbackground="#0CD9E8", highlightcolor="#0DFFCC",font=("Arial", 10, "bold"))
btn_kia.pack(side=tk.TOP)
btn_si = tk.Button(lbf1, width=25, text="Средства измерения", fg='#fff', command=lambda: read(2))
btn_si.configure(background="#6699CC", highlightbackground="#0CD9E8", highlightcolor="#0DFFCC",font=("Arial", 10, "bold"))
btn_si.pack(side=tk.TOP)
btn_att = tk.Button(lbf1, width=25, text="Испытательное оборудование", fg='#fff', command=lambda: read(3))
btn_att.configure(background="#6699CC", highlightbackground="#0CD9E8", highlightcolor="#0DFFCC",font=("Arial", 10, "bold"))
btn_att.pack(side=tk.TOP)
btn_type = tk.Button(lbf2, width=10, text="применить", fg='#fff', command=sort_type)
btn_type.configure(background="#6699CC", highlightbackground="#0CD9E8", highlightcolor="#0DFFCC",font=("Arial", 10, "bold"))
btn_type.pack(side=tk.RIGHT)

btn_create = tk.Button(Buttons, width=10, text="Создать", fg='#fff', command=Create)
btn_create.configure(background="#6699CC", highlightbackground="#0CD9E8", highlightcolor="#0DFFCC",font=("Arial", 10, "bold"))
btn_create.pack(side=tk.LEFT)
btn_delete = tk.Button(Buttons, width=10, text="Удалить", fg='#fff', command=Delete)
btn_delete.configure(background="#6699CC", highlightbackground="#0CD9E8", highlightcolor="#0DFFCC",font=("Arial", 10, "bold"))
btn_delete.pack(side=tk.LEFT)
btn_exit = tk.Button(Buttons, width=10, text="Выйти", fg='#fff', command=Exit)
btn_exit.configure(background="#6699CC", highlightbackground="#0CD9E8", highlightcolor="#0DFFCC",font=("Arial", 10, "bold"))
btn_exit.pack(side=tk.LEFT)

_c1 = ttk.Checkbutton(lbf2, text="Всё", variable=sort_var, onvalue=1, offvalue=0).pack(side=tk.LEFT)
#==================================LIST WIDGET========================================
tree_header = ["named","type", "number", "date", "place", "service"]
scrollbary = tk.Scrollbar(Right_2, orient=tk.VERTICAL)
scrollbarx = tk.Scrollbar(Right_2, orient=tk.HORIZONTAL)
tree_list = getfilet()
tree = ttk.Treeview(Right_2, columns=tree_header, height=400, yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
scrollbary.config(command=tree.yview)
scrollbary.pack(side=tk.RIGHT, fill=tk.Y)
scrollbarx.config(command=tree.xview)
scrollbarx.pack(side=tk.BOTTOM, fill=tk.X)
tree.heading('#0', text="№", anchor=tk.W)
tree.heading('named', text="Наименование", anchor=tk.W)
tree.heading('type', text="Тип", anchor=tk.W)
tree.heading('number', text="Зав. №", anchor=tk.W)
tree.heading('date', text="ПМО", anchor=tk.W)
tree.heading('place', text="Место установки", anchor=tk.W)
tree.heading('service', text="Тип обслуживания", anchor=tk.W)
tree.column('#0', stretch=False, minwidth=20, width=40)
tree.column('named', stretch=False, minwidth=50, width=50)
tree.column('type', stretch=False, minwidth=50, width=50)
tree.column('number', stretch=False, minwidth=50, width=50)
tree.column('date', stretch=False, minwidth=50, width=50)
tree.column('place', stretch=False, minwidth=50, width=50)
tree.column('service', stretch=False, minwidth=50, width=50)
tree.pack(expand=tk.YES, fill=tk.BOTH)



#==================================INITIALIZATION=====================================
if __name__ == '__main__':
    read(1)
    read_0()
    _build_tree() 
    root.event_add('<<Paste>>', '<Control-igrave>')
    root.event_add('<<Copy>>', '<Control-ntilde>') 
    root.config(menu=main_menu)
    root.mainloop()
